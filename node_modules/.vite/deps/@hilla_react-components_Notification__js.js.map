{
  "version": 3,
  "sources": ["../../@hilla/react-components/src/Notification.tsx", "../../@hilla/react-components/src/generated/Notification.ts", "../../@hilla/react-components/src/renderers/useSimpleOrChildrenRenderer.ts", "../../@hilla/react-components/src/renderers/useRenderer.ts", "../../@hilla/react-components/src/renderers/useSimpleRenderer.ts"],
  "sourcesContent": ["export * from \"@vaadin/notification/vaadin-notification.js\";\nimport {\n  type ComponentType,\n  type ForwardedRef,\n  forwardRef,\n  type ForwardRefExoticComponent,\n  type ReactElement,\n  type ReactNode,\n  type RefAttributes,\n} from 'react';\nimport {\n  Notification as _Notification,\n  NotificationElement,\n  type NotificationProps as _NotificationProps,\n  type ShowOptions,\n} from './generated/Notification.js';\nimport { useSimpleOrChildrenRenderer } from './renderers/useSimpleOrChildrenRenderer.js';\nimport type { ReactSimpleRendererProps } from './renderers/useSimpleRenderer.js';\n\nexport * from './generated/Notification.js';\n\nexport type NotificationReactRendererProps = ReactSimpleRendererProps<NotificationElement>;\n\nexport type NotificationProps = Partial<Omit<_NotificationProps, 'children' | 'renderer'>> &\n  Readonly<{\n    children?: ReactNode | ComponentType<NotificationReactRendererProps>;\n    renderer?: ComponentType<NotificationReactRendererProps>;\n  }>;\n\nfunction Notification(\n  { children, ...props }: NotificationProps,\n  ref: ForwardedRef<NotificationElement>,\n): ReactElement | null {\n  const [portals, renderer] = useSimpleOrChildrenRenderer(props.renderer, children);\n\n  return (\n    <_Notification {...props} ref={ref} renderer={renderer}>\n      {portals}\n    </_Notification>\n  );\n}\n\nexport type NotificationFunction = ForwardRefExoticComponent<NotificationProps & RefAttributes<NotificationElement>> & {\n  show(contents: string, options?: ShowOptions): NotificationElement;\n};\n\nconst ForwardedNotification = forwardRef(Notification) as NotificationFunction;\nForwardedNotification.show = NotificationElement.show;\n\nexport { ForwardedNotification as Notification };\n", "import type { EventName } from \"@lit-labs/react\";\nimport { Notification as NotificationElement, type NotificationEventMap as _NotificationEventMap, } from \"@vaadin/notification/vaadin-notification.js\";\nimport * as React from \"react\";\nimport { createComponent, type WebComponentProps } from \"../utils/createComponent.js\";\nexport { NotificationElement, };\nexport type NotificationEventMap = Readonly<{\n    onOpenedChanged: EventName<_NotificationEventMap[\"opened-changed\"]>;\n}>;\nconst events = { onOpenedChanged: \"opened-changed\" } as NotificationEventMap;\nexport type NotificationProps = WebComponentProps<NotificationElement, NotificationEventMap>;\nexport const Notification = createComponent({\n    elementClass: NotificationElement, events, react: React, tagName: \"vaadin-notification\"\n});\n", "import { Component, PureComponent } from 'react';\nimport type { ComponentType, ReactNode } from 'react';\nimport { useRenderer } from './useRenderer.js';\nimport type { UseRendererResult } from './useRenderer.js';\nimport {\n  type ReactSimpleRendererProps,\n  useSimpleRenderer,\n  type WebComponentSimpleRenderer,\n} from './useSimpleRenderer.js';\n\nexport function useSimpleOrChildrenRenderer<O extends HTMLElement>(\n  fnRenderer?: ComponentType<ReactSimpleRendererProps<O>> | null,\n  children?: ReactNode | ComponentType<ReactSimpleRendererProps<O>>,\n): UseRendererResult<WebComponentSimpleRenderer<O>> {\n  let _children: ReactNode | undefined;\n  let _fnRenderer: ComponentType<ReactSimpleRendererProps<O>> | null | undefined;\n  let shouldUseSimpleRendererResult = false;\n\n  if (typeof children === 'function') {\n    _children = undefined;\n    _fnRenderer = children;\n    shouldUseSimpleRendererResult = true;\n  } else {\n    _children = children;\n    _fnRenderer = fnRenderer;\n    shouldUseSimpleRendererResult = !!_fnRenderer;\n  }\n\n  const useChildrenRendererResult = useRenderer(_children);\n  const useSimpleRendererResult = useSimpleRenderer(_fnRenderer);\n\n  return shouldUseSimpleRendererResult ? useSimpleRendererResult : useChildrenRendererResult;\n}\n", "import {\n  type ComponentType,\n  createElement,\n  type PropsWithChildren,\n  type ReactElement,\n  type ReactNode,\n  useCallback,\n  useReducer,\n} from 'react';\nimport { createPortal } from 'react-dom';\nimport type { Slice, WebComponentRenderer } from './renderer.js';\n\nexport type UseRendererResult<W extends WebComponentRenderer> = readonly [\n  portals?: ReadonlyArray<ReactElement | null>,\n  renderer?: W,\n];\n\nconst initialState = new Map();\n\nfunction rendererReducer<W extends WebComponentRenderer>(\n  state: Map<HTMLElement, Slice<Parameters<W>, 1>>,\n  [root, ...args]: Parameters<W>,\n): Map<HTMLElement, Slice<Parameters<W>, 1>> {\n  return new Map(state).set(root, args as Slice<Parameters<W>, 1>);\n}\n\nexport function useRenderer<W extends WebComponentRenderer>(node: ReactNode): UseRendererResult<W>;\nexport function useRenderer<P extends {}, W extends WebComponentRenderer>(\n  reactRenderer: ComponentType<P> | null | undefined,\n  convert: (props: Slice<Parameters<W>, 1>) => PropsWithChildren<P>,\n): UseRendererResult<W>;\nexport function useRenderer<P extends {}, W extends WebComponentRenderer>(\n  reactRendererOrNode: ReactNode | ComponentType<P> | null | undefined,\n  convert?: (props: Slice<Parameters<W>, 1>) => PropsWithChildren<P>,\n): UseRendererResult<W> {\n  const [map, update] = useReducer<typeof rendererReducer<W>>(rendererReducer, initialState);\n  const renderer = useCallback(((...args: Parameters<W>) => update(args)) as W, []);\n\n  return reactRendererOrNode\n    ? [\n        Array.from(map.entries()).map(([root, args]) =>\n          createPortal(\n            convert\n              ? createElement<P>(reactRendererOrNode as ComponentType<P>, convert(args))\n              : (reactRendererOrNode as ReactNode),\n            root,\n          ),\n        ),\n        renderer,\n      ]\n    : [];\n}\n", "import type { ComponentType, PropsWithChildren } from 'react';\nimport type { Slice } from './renderer.js';\nimport { useRenderer, type UseRendererResult } from './useRenderer.js';\n\nexport type ReactSimpleRendererProps<O extends HTMLElement> = Readonly<{\n  original: O;\n}>;\nexport type WebComponentSimpleRenderer<O extends HTMLElement> = (root: HTMLElement, original: O) => void;\n\nfunction convertSimpleRendererArgs<O extends HTMLElement>([original]: Slice<\n  Parameters<WebComponentSimpleRenderer<O>>,\n  1\n>): PropsWithChildren<ReactSimpleRendererProps<O>> {\n  return { original };\n}\n\nexport function useSimpleRenderer<O extends HTMLElement>(\n  reactRenderer?: ComponentType<ReactSimpleRendererProps<O>> | null,\n): UseRendererResult<WebComponentSimpleRenderer<O>> {\n  return useRenderer(reactRenderer, convertSimpleRendererArgs);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AACA,IAAAA,gBAQO;ACPP,QAAuB;ADFvB,cAAc;ACCd,SAAS,gBAAgBC,SAAgF;;;ACDzG,IAAAC,gBAAyC;;;ACAzC,mBAQO;AACP,uBAA6B;AAQ7B,IAAMC,IAAe,oBAAI;AAEzB,SAASC,EACPC,GACA,CAACC,IAAM,GAAGC,EAAI,GAC6B;AAC3C,SAAO,IAAI,IAAIF,CAAK,EAAE,IAAIC,IAAMC,EAA+B;AACjE;AAOO,SAASC,EACdC,GACAC,IACsB;AACtB,QAAM,CAACC,IAAKC,EAAM,QAAIC,aAAAA,YAAsCT,GAAiBD,CAAY,GACnFW,SAAWC,aAAAA,aAAa,IAAIR,OAAwBK,GAAOL,EAAI,GAAS,CAAC,CAAC;AAEhF,SAAOE,IACH,CACE,MAAM,KAAKE,GAAI,QAAQ,CAAC,EAAE,IAAI,CAAC,CAACL,IAAMC,CAAI,UACxCS,iBAAAA,cACEN,SACIO,aAAAA,eAAiBR,GAAyCC,GAAQH,CAAI,CAAC,IACtEE,GACLH,EACF,CACF,GACAQ,EACF,IACA,CAAC;AACP;;;AC1CA,SAASI,EAAiD,CAACC,CAAQ,GAGhB;AACjD,SAAO,EAAE,UAAAA,EAAS;AACpB;AAEO,SAASC,EACdC,GACkD;AAClD,SAAOC,EAAYD,GAAeH,CAAyB;AAC7D;;;AFVO,SAASK,EACdC,IACAC,IACkD;AAClD,MAAIC,IACAC,GACAC,KAAgC;AAEhC,SAAOH,MAAa,cACtBC,KAAY,QACZC,IAAcF,IACdG,KAAgC,SAEhCF,KAAYD,IACZE,IAAcH,IACdI,KAAgC,CAAC,CAACD;AAGpC,QAAME,KAA4BC,EAAYJ,EAAS,GACjDK,KAA0BC,EAAkBL,CAAW;AAE7D,SAAOC,KAAgCG,KAA0BF;AACnE;;;AFII,yBAAA;AC5BJ,IAAMI,IAAS,EAAE,iBAAiB,iBAAiB;AAAnD,IAEaC,KAAeC,EAAgB,EACxC,cAAcC,GAAqB,QAAAH,GAAQ,OAAOI,GAAO,SAAS,sBACtE,CAAC;ADiBD,SAASH,GACP,EAAE,UAAAI,GAAU,GAAGC,EAAM,GACrBC,IACqB;AACrB,MAAM,CAACC,IAASC,EAAQ,IAAIC,EAA4BJ,EAAM,UAAUD,CAAQ;AAEhF,aACEM,mBAAAA,KAACV,IAAA,EAAe,GAAGK,GAAO,KAAKC,IAAK,UAAUE,IAC3C,UAAAD,GAAAA,CACH;AAEJ;AAMA,IAAMI,QAAwBC,cAAAA,YAAWZ,EAAY;AACrDW,EAAsB,OAAOT,EAAoB;",
  "names": ["import_react", "NotificationElement", "import_react", "initialState", "rendererReducer", "state", "root", "args", "useRenderer", "reactRendererOrNode", "convert", "map", "update", "useReducer", "renderer", "useCallback", "createPortal", "createElement", "convertSimpleRendererArgs", "original", "useSimpleRenderer", "reactRenderer", "useRenderer", "useSimpleOrChildrenRenderer", "fnRenderer", "children", "_children", "_fnRenderer", "shouldUseSimpleRendererResult", "useChildrenRendererResult", "useRenderer", "useSimpleRendererResult", "useSimpleRenderer", "events", "Notification", "createComponent", "NotificationElement", "React", "children", "props", "ref", "portals", "renderer", "useSimpleOrChildrenRenderer", "jsx", "ForwardedNotification", "forwardRef"]
}
